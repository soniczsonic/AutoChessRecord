// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`App snapshot renders the loading screen 1`] = `null`;

exports[`App snapshot renders the root without loading screen 1`] = `
<View
  style={
    Object {
      "flex": 1,
    }
  }
>
  <View
    collapsable={false}
    style={
      Array [
        Object {
          "flex": 1,
          "overflow": "hidden",
        },
        undefined,
      ]
    }
  >
    <View
      style={
        Object {
          "backgroundColor": "#eaecef",
          "borderBottomColor": "#6200EE",
          "borderBottomWidth": 2,
          "elevation": 2,
          "flexDirection": "row",
          "height": 52,
        }
      }
    >
      <View
        accessibilityLabel="rocommended deck, tab, 1 of 3"
        accessible={true}
        isTVSelectable={true}
        onResponderGrant={[Function]}
        onResponderMove={[Function]}
        onResponderRelease={[Function]}
        onResponderTerminate={[Function]}
        onResponderTerminationRequest={[Function]}
        onStartShouldSetResponder={[Function]}
        style={
          Object {
            "alignItems": "center",
            "flex": 1,
            "justifyContent": "center",
            "opacity": 1,
          }
        }
      >
        <View
          style={
            Object {
              "backgroundColor": "#6200EE",
              "borderTopLeftRadius": 10,
              "borderTopRightRadius": 10,
              "bottom": 0,
              "height": 10,
              "position": "absolute",
              "width": 247.5,
            }
          }
        >
          <Text />
        </View>
        <Text
          style={
            Object {
              "color": "#eaecef",
              "fontSize": 20,
              "fontWeight": "bold",
            }
          }
        >
          rocommended deck
        </Text>
      </View>
      <View
        accessibilityLabel="unit, tab, 2 of 3"
        accessible={true}
        isTVSelectable={true}
        onResponderGrant={[Function]}
        onResponderMove={[Function]}
        onResponderRelease={[Function]}
        onResponderTerminate={[Function]}
        onResponderTerminationRequest={[Function]}
        onStartShouldSetResponder={[Function]}
        style={
          Object {
            "alignItems": "center",
            "flex": 1,
            "justifyContent": "center",
            "opacity": 1,
          }
        }
      >
        <View
          style={
            Object {
              "backgroundColor": "#eaecef",
              "borderTopLeftRadius": 10,
              "borderTopRightRadius": 10,
              "bottom": 0,
              "height": 10,
              "position": "absolute",
              "width": 247.5,
            }
          }
        >
          <Text />
        </View>
        <Text
          style={
            Object {
              "color": "#6200EE",
              "fontSize": 20,
              "fontWeight": "bold",
            }
          }
        >
          unit
        </Text>
      </View>
      <View
        accessibilityLabel="my page, tab, 3 of 3"
        accessible={true}
        isTVSelectable={true}
        onResponderGrant={[Function]}
        onResponderMove={[Function]}
        onResponderRelease={[Function]}
        onResponderTerminate={[Function]}
        onResponderTerminationRequest={[Function]}
        onStartShouldSetResponder={[Function]}
        style={
          Object {
            "alignItems": "center",
            "flex": 1,
            "justifyContent": "center",
            "opacity": 1,
          }
        }
      >
        <View
          style={
            Object {
              "backgroundColor": "#eaecef",
              "borderTopLeftRadius": 10,
              "borderTopRightRadius": 10,
              "bottom": 0,
              "height": 10,
              "position": "absolute",
              "width": 247.5,
            }
          }
        >
          <Text />
        </View>
        <Text
          style={
            Object {
              "color": "#6200EE",
              "fontSize": 20,
              "fontWeight": "bold",
            }
          }
        >
          my page
        </Text>
      </View>
    </View>
    <View
      onLayout={[Function]}
      style={
        Object {
          "flex": 1,
        }
      }
    >
      <RCTScrollView
        alwaysBounceHorizontal={false}
        automaticallyAdjustContentInsets={false}
        bounces={false}
        contentContainerStyle={
          Object {
            "flex": 1,
          }
        }
        contentOffset={
          Object {
            "x": 0,
            "y": 0,
          }
        }
        directionalLockEnabled={true}
        horizontal={true}
        keyboardDismissMode="on-drag"
        keyboardShouldPersistTaps="always"
        onMomentumScrollEnd={[Function]}
        onScroll={[Function]}
        onScrollBeginDrag={[Function]}
        overScrollMode="never"
        pagingEnabled={true}
        scrollEventThrottle={1}
        scrollToOverflowEnabled={true}
        scrollsToTop={false}
        showsHorizontalScrollIndicator={false}
        style={
          Object {
            "flex": 1,
          }
        }
      >
        <View>
          <View
            accessibilityElementsHidden={false}
            importantForAccessibility="auto"
            style={
              Object {
                "flex": 1,
                "overflow": "hidden",
              }
            }
          >
            <View
              onLayout={[Function]}
              style={
                Object {
                  "flex": 1,
                }
              }
            >
              <View
                enabled={false}
                hitSlop={
                  Object {
                    "bottom": 135,
                  }
                }
                maxDeltaX={15}
                minOffsetY={5}
                onGestureEvent={[Function]}
                onHandlerStateChange={[Function]}
              >
                <View
                  style={
                    Object {
                      "backgroundColor": "#eee",
                      "flex": 1,
                      "flexDirection": "column-reverse",
                      "overflow": "hidden",
                    }
                  }
                >
                  <View
                    style={
                      Object {
                        "flex": 1,
                      }
                    }
                  >
                    <View
                      pointerEvents="auto"
                      style={
                        Object {
                          "bottom": 0,
                          "left": 0,
                          "opacity": 1,
                          "position": "absolute",
                          "right": 0,
                          "top": 0,
                          "transform": Array [
                            Object {
                              "translateX": 0,
                            },
                            Object {
                              "translateY": 0,
                            },
                          ],
                        }
                      }
                    >
                      <View
                        accessibilityElementsHidden={false}
                        style={
                          Object {
                            "backgroundColor": "#fff",
                            "flex": 1,
                          }
                        }
                      />
                    </View>
                  </View>
                </View>
              </View>
            </View>
          </View>
          <View
            accessibilityElementsHidden={true}
            importantForAccessibility="no-hide-descendants"
            style={null}
          />
          <View
            accessibilityElementsHidden={true}
            importantForAccessibility="no-hide-descendants"
            style={null}
          />
        </View>
      </RCTScrollView>
    </View>
  </View>
  <Modal
    animationType="fade"
    hardwareAccelerated={false}
    onRequestClose={[Function]}
    transparent={true}
    visible={false}
  >
    <View
      accessible={true}
      isTVSelectable={true}
      onResponderGrant={[Function]}
      onResponderMove={[Function]}
      onResponderRelease={[Function]}
      onResponderTerminate={[Function]}
      onResponderTerminationRequest={[Function]}
      onStartShouldSetResponder={[Function]}
      style={
        Object {
          "backgroundColor": "rgba(0,0,0,0.4)",
          "flex": 1,
          "justifyContent": "flex-end",
          "opacity": 1,
        }
      }
    >
      <View
        accessible={true}
        isTVSelectable={true}
        onResponderGrant={[Function]}
        onResponderMove={[Function]}
        onResponderRelease={[Function]}
        onResponderTerminate={[Function]}
        onResponderTerminationRequest={[Function]}
        onStartShouldSetResponder={[Function]}
        style={
          Object {
            "backgroundColor": "#fff",
            "elevation": 4,
            "height": 0,
            "maxHeight": 667,
            "minHeight": 56,
            "opacity": 1,
            "padding": 15,
          }
        }
      >
        <RCTScrollView
          data={Array []}
          disableVirtualization={false}
          getItem={[Function]}
          getItemCount={[Function]}
          horizontal={false}
          initialNumToRender={10}
          keyExtractor={[Function]}
          maxToRenderPerBatch={10}
          numColumns={1}
          onContentSizeChange={[Function]}
          onEndReachedThreshold={2}
          onLayout={[Function]}
          onMomentumScrollEnd={[Function]}
          onScroll={[Function]}
          onScrollBeginDrag={[Function]}
          onScrollEndDrag={[Function]}
          removeClippedSubviews={false}
          renderItem={[Function]}
          scrollEventThrottle={50}
          stickyHeaderIndices={Array []}
          style={
            Object {
              "marginHorizontal": -15,
              "marginTop": 0,
            }
          }
          updateCellsBatchingPeriod={50}
          viewabilityConfigCallbackPairs={Array []}
          windowSize={21}
        >
          <View />
        </RCTScrollView>
      </View>
    </View>
  </Modal>
</View>
`;
